**********************************************Problem*****************8**************************
The mayor of a rapidly growing city wants to ensure balanced population distribution. The city is represented as a grid where each 
cell indicates the population in that area. Your task is to divide the grid into two zones such that the population difference between
the two zones is minimized. Each zone must contain at least one cell, and the two zones must be disjoint.

Input Format

An integer t, the number of test cases. For each test case: An integer n, representing the size of the grid. A 2D array grid of
size n x n, where each cell contains the population.

Constraints

1≤t≤5
1≤n≤8
1≤grid[i][j]≤100
Output Format

For each test case, output a single integer representing the minimum population difference between the two zones.

Sample Input 0

1  
4  
1 3 1 3  
2 2 2 2  
3 1 3 1  
2 2 2 2  
Sample Output 0

0 

*****************************************Solution**************8*************************
import java.io.*;
import java.util.*;

public class Solution {
    
    static int minDifference;
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        
        while (t-- > 0) {
            int n = sc.nextInt();
            int[][] grid = new int[n][n];
            int totalPopulation = 0;
            
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    grid[i][j] = sc.nextInt();
                    totalPopulation += grid[i][j];
                }
            }
            
            minDifference = Integer.MAX_VALUE;
            boolean[] selected = new boolean[n * n];
            backtrack(grid, n, selected, 0, 0, 0, totalPopulation);
            System.out.println(minDifference);
        }
    }
    
    static void backtrack(int[][] grid, int n, boolean[] selected, int index, int zone1Sum, int zone1Count, int totalPopulation) {
        if (zone1Count > 0 && zone1Count < n * n) {
            int zone2Sum = totalPopulation - zone1Sum;
            minDifference = Math.min(minDifference, Math.abs(zone1Sum - zone2Sum));
        }
        
        if (index == n * n || minDifference == 0) {
            return;
        }
        
        int row = index / n;
        int col = index % n;
        
        // Include current cell in zone1
        selected[index] = true;
        backtrack(grid, n, selected, index + 1, zone1Sum + grid[row][col], zone1Count + 1, totalPopulation);
        
        // Exclude current cell (implicitly adding it to zone2)
        selected[index] = false;
        backtrack(grid, n, selected, index + 1, zone1Sum, zone1Count, totalPopulation);
    }
}
