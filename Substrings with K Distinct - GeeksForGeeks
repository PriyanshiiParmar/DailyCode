******************************** Problem ***********************************
Substrings with K Distinct - https://www.geeksforgeeks.org/problems/count-number-of-substrings4528/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=count-number-of-substrings

****************************************** Solution *********************************************
----------------------- THIS IS BRUTE FORCE , WON'T BE ACCEPTED --------------------------
class Solution {
    int countSubstr(String s, int k) {
        // your code here
        int n = s.length(), cnt = 0;
        Map<Character, Integer> map = new HashMap<>();
        for(int i = 0; i < n ; i++)
        {
            map.clear();
            for(int j = i; j < n; j++)
            {
                
                map.put(s.charAt(j),map.getOrDefault(s.charAt(j), 0) + 1); 
                // int ch = countChar(s.substring(i, j));
                // System.out.println(s.substring(i, j));
                if(map.size() == k)
                cnt++;
            }
        }
        return cnt;
    }

------------------------- BETTER APPROACH WILL BE TO USE SLIDING WINDOW, WITH TWO_POINTERS ---------------------------
class Solution {
    int countSubstr(String s, int k) {
        return countAtMostK(s, k) - countAtMostK(s, k - 1);
    }

    private int countAtMostK(String s, int k) {
        if (k == 0) return 0; 

        int n = s.length();
        int l = 0, count = 0;
        Map<Character, Integer> map = new HashMap<>();

        for (int r = 0; r < n; r++) {
            char ch = s.charAt(r);
            map.put(ch, map.getOrDefault(ch, 0) + 1);

            while (map.size() > k) {
                char c = s.charAt(l);
                map.put(c, map.get(c) - 1);
                if (map.get(c) == 0) {
                    map.remove(c);
                }
                l++;
            }

            count += (r - l + 1);
        }
        return count;
    }
}
