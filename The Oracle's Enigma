*****************************************Problem*************************************
The Oracle has presented you with a string of mystical runes, containing a mix of alphanumeric symbols. The challenge is to rearrange these runes to form the longest
symmetric incantation, also known as a palindrome. Your task is to determine the maximum length of the incantation that can be formed by selecting and rearranging any subset of the runes.

Input Format

The first line will give 𝑇, the number of test cases.
Each of the next 𝑇 lines will provide a string 𝑆, representing the mystical runes.
Constraints

1<=T<=1000
S.length <=1000
S only contains alphanumeric characters.
Output Format

For each test case, print the length of the longest possible symmetric incantation that can be formed.

Sample Input 0

1
babadab
Sample Output 0

5
Explanation 0

Some Possible Palindrome that can be constructed from given string are:-

babab
abbba
baaab
ababa etc.
Maximum length that can be achieved is 5.
****************************Solution**********************************
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        sc.nextLine();
        
        while (t-- > 0) {
            String s = sc.nextLine();
            System.out.println(maxPalLen(s));
        }
    }

    public static int maxPalLen(String s) {
        Map<Character, Integer> charCount = new HashMap<>();
        
        for (char c : s.toCharArray()) {
            charCount.put(c, charCount.getOrDefault(c, 0) + 1);
        }
        
        int length = 0;
        boolean oddFound = false;
        
        for (int count : charCount.values()) {
            if (count % 2 == 0) {
                length += count;
            } else {
                length += count - 1;
                oddFound = true;
            }
        }
        
        if (oddFound) {
            length += 1;
        }
        
        return length;
    }
}
