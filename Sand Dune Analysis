*********************************Problem****************************************
In an immense desert, researchers are studying a series of sand dunes. The desert is represented as a 0-indexed m×n binary matrix grid, where each element denotes the presence (1) or absence (0) of sand particles in specific regions of the dunes.

The researchers aim to identify a stable subset of sand dunes, where the distribution of sand particles in each column of the chosen subset of rows is not too dense.

A subset of sand dunes is considered stable if the sum of sand particles in each column of the subset is at most half of the total number of rows in that subset. More formally, if the chosen subset of rows has k rows, the sum of each column in this subset must not exceed ⌊k/2⌋.

Your task is to help the researchers find a stable subset of sand dunes.

Input Format

The first line contains T, the number of test cases.

For each test case:

The first line contains two integers m and n, the number of rows and columns in the matrix grid.
The next m lines each contain n integers representing the binary matrix grid, where 1 represents sand particles, and 0 represents empty regions.
Constraints

1<=T<=10^3
1<=m<=10^4
1<=n<=5
matrix[i][j] is either 0 or 1.
Output Format

For each test case, simply output the row indices of a stable subset as a single line:

If a stable subset exists, list the indices in ascending order.
If no stable subset exists, output [].
Sample Input 0

1
3 4 
0 1 1 0
0 0 0 1 
1 1 1 1
Sample Output 0

[0,1]
Explanation 0

We can choose the 0th and 1st rows to form a stable subset of sand dunes. The chosen subset contains 2 rows.

For the 0th column, the sum of sand particles is 0+0=0, which is at most ⌊2/2⌋=1.
For the 1st column, the sum of sand particles is 1+0=1, which is at most ⌊2/2⌋=1.
For the 2nd column, the sum of sand particles is 1+0=1, which is at most ⌊2/2⌋=1.
For the 3rd column, the sum of sand particles is 0+1=1, which is at most ⌊2/2⌋=1.
*********************************Solution***************************************
import java.util.*;

public class StableSubset {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        while (T-- > 0) {
            int m = sc.nextInt();
            int n = sc.nextInt();
            int[][] grid = new int[m][n];
            for (int i = 0; i < m; i++) {
                for (int j = 0; j < n; j++) {
                    grid[i][j] = sc.nextInt();
                }
            }
            List<Integer> result = findStableSubset(m, n, grid);
            if (result.isEmpty()) {
                System.out.println("[]");
            } else {
                System.out.print("[");
                for (int i = 0; i < result.size(); i++) {
                    System.out.print(result.get(i));
                    if (i < result.size() - 1) {
                        System.out.print(",");
                    }
                }
                System.out.println("]");
            }
        }
    }

    public static List<Integer> findStableSubset(int m, int n, int[][] grid) {
        for (int size = 1; size <= m; size++) {
            for (List<Integer> rows : getCombinations(m, size)) {
                int half_k = size / 2;
                int[] colSums = new int[n];
                for (int r : rows) {
                    for (int c = 0; c < n; c++) {
                        colSums[c] += grid[r][c];
                    }
                }
                boolean stable = true;
                for (int sum : colSums) {
                    if (sum > half_k) {
                        stable = false;
                        break;
                    }
                }
                if (stable) {
                    return rows;
                }
            }
        }
        return new ArrayList<>();
    }

    public static List<List<Integer>> getCombinations(int m, int size) {
        List<List<Integer>> combinations = new ArrayList<>();
        for (int i = 0; i < (1 << m); i++) {
            List<Integer> combination = new ArrayList<>();
            for (int j = 0; j < m; j++) {
                if ((i & (1 << j)) != 0) {
                    combination.add(j);
                }
            }
            if (combination.size() == size) {
                combinations.add(combination);
            }
        }
        return combinations;
    }
}
