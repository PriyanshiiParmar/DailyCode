**********************************Problem***********************************
The Acropolis Institute of Technology and Research (AITR) ACM and ACM-W Student Chapters are vibrant communities that foster
innovation, collaboration, and technical excellence. Through workshops, hackathons, and outreach programs, AITR ACM serves as
a hub for students passionate about computing, coding, and problem-solving.

Prayatna 2.0, the nationwide 36-hour hackathon hosted by AITR ACM, is a platform where the brightest tech minds come together to
solve real-world challenges. Combining innovation and collaboration, this event pushes participants to think creatively and work
cohesively as a team. The hackathon not only tests technical expertise but also encourages inclusivity and teamwork, setting the
stage for breakthroughs that can make a real impact.

As part of the organizing team for Prayatna 2.0, you have been tasked with ensuring the smooth formation of teams for the hackathon.
Each team must consist of exactly 4 participants, with the following conditions:

Inclusivity: Every team must include at least one female member. Exclusivity: No participant can be a part of more than one team. 
Given a list of participants and their genders, your goal is to calculate the maximum number of valid teams that can be formed. 
This will ensure fairness and inclusivity while maintaining the excitement and spirit of Prayatna 2.0 .

Can you take on this challenge and help us kick off Prayatna 2.0 with perfectly balanced teams?

Input Format

The first line contains an integer t, the number of test cases. For each test case: The first line contains an integer n, the
total number of participants. The second line contains a string of length n, where each character represents the gender of a
participant ('M' for male, 'F' for female).

Constraints

1≤t≤100
1≤n≤10^5
The total number of participants across all test cases does not exceed 10^6
Output Format

For each test case, output a single integer representing the maximum number of valid teams that can be formed.

Sample Input 0

2  
6  
MMFMFM  
5  
FFFFM  
Sample Output 0

1  
1 


*******************************************Solution**********************************

--------------------Java(failed one tc)---------------------
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        sc.nextLine();

        while (t-- > 0) {
            int n = sc.nextInt();
            sc.nextLine();
            String s = sc.nextLine();

            int male = 0, fem = 0;
            for (char c : s.toCharArray()) {
                if (c == 'M') male++;
                else fem++;
            }

            if (fem == 0) {
                System.out.println(0);
            } else {
                int maxPossibleTeams = n / 4;
                int validTeams = Math.min(maxPossibleTeams, fem);
                System.out.println(validTeams);
            }
        }

        sc.close();
    }
}



--------------Pyhton(equivalent for java)------------------
def main():
    t = int(input())

    for _ in range(t):
        n = int(input())
        s = input().strip()

        male = s.count('M')
        fem = s.count('F')

        if fem == 0:
            print(0)
        else:
            max_possible_teams = n // 4
            valid_teams = min(max_possible_teams, fem)
            print(valid_teams)


if __name__ == "__main__":
    main()
