In the heart of a vast desert, merchants are preparing their camel caravans to transport valuable goods across the dunes. Each camel is assigned a load value representing its carrying capacity. To ensure a smooth journey, the camels need to be paired up into n/2 groups, and the goal is to minimize the maximum group load. The group load of a pair (a, b) is equal to a + b. For example, if we have pairs (1,5), (2,3), and (4,4), the maximum group load would be max(1+5, 2+3, 4+4) = max(6, 5, 8) = 8. Given an array loadCapacity of even length n, where each element represents the load value of a camel, pair up the camels into n / 2 groups such that:

Each camel is in exactly one pair.
The maximum group load is minimized.
Output the minimized maximum group load after optimally pairing up the camels.

Input Format

The first line will give T, the number of test cases.
The first line of each test case will give n.
The second line of each test case will give an array loadCapacity of length n.
Constraints

1<=T<=1000
n is even.
2<=n<=10^5
1<= loadCapacity[i]<=10^9
Output Format

For each test case, output the minimized maximum group load after optimally pairing up the camels.

Sample Input 0

1
4
3 5 2 3
Sample Output 0

7
Explanation 0

The camels can be paired up into groups (3,3) and (5,2). The maximum group load is max(3+3, 5+2) = max(6, 7) = 7.


************************************************************Solution*********************************************************************
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while(t-- > 0)
        {
            int n = sc.nextInt();
            long[]arr = new long[n];
            for(int i = 0; i < n; i++)
            {
                arr[i] = sc.nextLong();
            }
            Arrays.sort(arr);
            long ans = 0;
            for(int i = 0; i < n; i++)
            {
                long sum = arr[i] + arr[n - i - 1];
                ans = Math.max(sum, ans);
            }
            System.out.println(ans);
        }
    }
}

