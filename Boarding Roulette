****************************************Problem****************************************
At a busy railway station, passengers are waiting in a queue to board a train.
The train offers two types of seats: Window (0) and Aisle (1). Each passenger has a preference
for a specific type of seat.

The available seats are arranged in a stack, meaning the first available seat (top of the stack)
must be assigned before moving to the next one. At each step:

If the passenger at the front of the queue prefers the seat at the top of the stack, they take it
and board the train.
Otherwise, they move to the end of the queue to wait for a better option.
This continues until no passengers in the queue are willing to take the top seat, meaning some
passengers are left without a seat.

Input Format

The first line contains T, the number of test cases.
The first line of each testcase will give n, representing the number of passengers and available seats.
The second line of each testcase will give the array passengers.
The third line of each testcase will give the array available seats.
Constraints

1 <= T <= 1000.
1 <= n <= 100
seat[i] and passenger[i] are either 0 or 1.
The number of passengers equals the number of available seats.
Output Format

For each test case, print the number of passengers who were unable to get a seat.

Sample Input 0

1  
4  
1 1 0 0  
0 1 0 1  
Sample Output 0

0
Explanation 0

Passenger queue: [1, 1, 0, 0], Seat stack: [0, 1, 0, 1]

First passenger (1) moves to the back → [1, 0, 0, 1]
Next passenger (1) moves to the back → [0, 0, 1, 1]
Next passenger (0) takes the Window seat → [0, 1, 1], Seats: [1, 0, 1]
Next passenger (0) moves to the back → [1, 1, 0]
Next passenger (1) takes the Aisle seat → [1, 0], Seats: [0, 1]
Next passenger (1) moves to the back → [0, 1]
Next passenger (0) takes the Window seat → [1], Seats: [1]
Last passenger (1) takes the Aisle seat → [], Seats: []
Hence all passengers are able to get a seat.


***************************************Solution***************************************
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while(t-- > 0)
        {
            int n = sc.nextInt();
            List<Integer> pass = new ArrayList<>();
            List<Integer> seats = new ArrayList<>();
            for(int i = 0; i < n; i++)
            {
                pass.add(sc.nextInt());
            }
            for(int i = 0; i < n; i++)
            {
                seats.add(sc.nextInt());
            }
            System.out.println(findSeaten(pass, seats));
        }
    }
    public static int findSeaten(List<Integer> pass, List<Integer> seats)
    {
        Queue<Integer> passenger = new LinkedList<>(pass);
        Stack<Integer> st = new Stack<>();
        int n = seats.size();
        for(int i = n - 1; i >= 0; i--)
        {
            st.push(seats.get(i));
        }
        boolean cont = true;
        while(cont && !passenger.isEmpty())
        {
            cont = false;
            int size = passenger.size();
            for(int i = 0; i < size; i++)
            {
                int current = passenger.poll();
                if(!st.isEmpty() && current == st.peek())
                {
                   st.pop();
                    cont = true;
                }
               else passenger.offer(current);
            }
        }
        return passenger.size();
    }
}
