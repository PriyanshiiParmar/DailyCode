*************************************************Problem*******************************************************
You are given a landscape represented as a string s, consisting only of uppercase English letters.

Some areas of the land are overgrown with weedsâ€”represented by the substrings "GR" (Grass Roots) and "WL" (Wild Leaves).

To clear the land, you can remove any occurrence of "GR" or "WL" in one operation. The land then reconnects, potentially forming new "GR" or "WL" areas.

Your goal is to determine the minimum possible length of the land after all possible clearing operations are performed.

Input Format

The first line contains an integer T, the number of test cases.
Each of the next T lines contains a string s, representing the initial state of the land.
Constraints

1 <= |s| <= 100 (length of the land)
s consists only of uppercase English letters.
1 <= T <= 1000
Output Format

For each test case, print the minimum possible length of the land after all possible clearing operations.

Sample Input 0

1
GRFIELDWL
Sample Output 0

5
Explanation 0

"GRFIELDWL"

Remove substring, land becomes "FIELDWL".
Remove substring, land becomes "FIELD".
Minimum length = 5.
Sample Input 1

1
FARMLAND
Sample Output 1

8
Explanation 1

No substring to clear in "FARMLAND". Minimum length = 8.


*************************************************Solution***************************************************
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        sc.nextLine(); // Consume newline character

        while (t-- > 0) {
            String s = sc.nextLine();
            int ans = removeSubstring(s);
            System.out.println(s.length() - ans);
        }
        sc.close();
    }

    public static int removeSubstring(String s) {
        int n = s.length();
        int rem = 0;
        StringBuilder sb = new StringBuilder(s);
        int i = 0;

        while (i < n) { 
            if (i + 1 < sb.length() && sb.charAt(i) == 'W' && sb.charAt(i + 1) == 'L') {
                rem += 2;
                sb.delete(i, i + 2);
                i = Math.max(0, i - 1); 
                n = sb.length(); 
            } 
            else if (i + 1 < sb.length() && sb.charAt(i) == 'G' && sb.charAt(i + 1) == 'R') {
                rem += 2;
                sb.delete(i, i + 2);
                i = Math.max(0, i - 1); 
                n = sb.length(); 
            } 
            else {
                i++;
            }
        }
        return rem;
    }
}
