***********************************Problem*******************************
A thief is trapped in a maze of city streets represented as an n × n grid. Each cell in the grid represents either a blocked street (1) 
or an open street (0). The thief starts at the top-left corner of the grid (position[0][0]) and needs to escape to the bottom-right corner
of the grid (position [n−1][n−1]). The thief can only move up, down, left, or right.

Your task is to determine whether the thief can escape the maze.

Input Format

An integer t, the number of test cases. For each test case: An integer n, the size of the grid. A 2D array grid of size n×n,
where: grid[i][j]=1: Blocked street. grid[i][j]=0: Open street.

Constraints

1≤t≤10 1≤n≤20 grid[0][0]=0 (Top-left is always open). grid[n−1][n−1]=0 (Bottom-right is always open).

Output Format

For each test case, print "YES" if the thief can escape; otherwise, print "NO".

Sample Input 0

1  
3  
0 0 1  
1 0 1  
1 0 0  
Sample Output 0

YES  


**************************************Solution**************************************
import java.util.*;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();  
        while (t-- > 0) {
            int n = sc.nextInt();
            int[][] grid = new int[n][n];
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    grid[i][j] = sc.nextInt();
                }
            }
            if (canEscape(grid, n)) {
                System.out.println("YES");
            } else {
                System.out.println("NO");
            }
        }
        sc.close();
    }

    public static boolean canEscape(int[][] grid, int n) {
        boolean[][] visited = new boolean[n][n];  
        return dfs(grid, 0, 0, visited, n);
    }

    public static boolean dfs(int[][] grid, int x, int y, boolean[][] visited, int n) {
        if (x == n - 1 && y == n - 1) {
            return true;
        }
        if (x < 0 || y < 0 || x >= n || y >= n || grid[x][y] == 1 || visited[x][y]) {
            return false; 
        }
        visited[x][y] = true;  
        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        for (int[] dir : directions) {
            int nx = x + dir[0];
            int ny = y + dir[1];
            if (dfs(grid, nx, ny, visited, n)) {
                return true;
            }
        }
        return false;
    }
}
