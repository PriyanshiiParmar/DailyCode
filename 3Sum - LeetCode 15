*************************************** Problem ****************************************
 3Sum - https://leetcode.com/problems/3sum/description/?envType=study-plan-v2&envId=top-interview-150


*************************************** Solution ****************************************

// 1st approach - GAVE MLE ------
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Map<Integer, Integer> map = new HashMap<>();
        List<List<Integer>> list = new ArrayList<>();
        for(int i = 0; i < nums.length; i++)
        {
            map.put(nums[i], i);
        }

        for(int i = 0; i < nums.length - 2; i++)
        {
            for(int j = i + 1; j < nums.length; j++)
            {
                int find = -(nums[i] + nums[j]);
                if(map.containsKey(find) && map.get(find) != i && map.get(find) != j)
                {
                    List<Integer> inner = new ArrayList<>();
                    inner.add(nums[i]);
                    inner.add(nums[j]);
                    inner.add(find);
                    Collections.sort(inner);
                    if(!list.contains(inner))
                    list.add(inner);
                }
            }
        }
        return list;
    }
}

--------------- 2nd optimized one ------------

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> res = new ArrayList<>();
        for(int i = 0; i < nums.length - 2; i++)
        {
            if(i > 0 && nums[i] == nums[i-1]) continue;
            int j = i + 1, k = nums.length - 1;
            while(j < k)
            {
                int sum = nums[i] + nums[j] + nums[k];
                if(sum > 0)
                {
                    k--;
                }else if(sum < 0)
                {
                    j++;
                }else{
                    List<Integer> list = new ArrayList<>();
                    list.add(nums[i]);
                    list.add(nums[j]);
                    list.add(nums[k]);
                    res.add(list);
                    j++;
                    k--;
                    while(j < k && nums[j] == nums[j-1]) j++;
                    while(k > j && nums[k] == nums[k+1]) k--;
                }
            }
        }
        return res;
    }
}
