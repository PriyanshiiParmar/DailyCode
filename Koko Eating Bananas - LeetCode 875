*********************************** Problem **************************************
Koko Eating Bananas - https://leetcode.com/problems/koko-eating-bananas/description/


******************************** Solution *************************************
class Solution 
{
    public int minEatingSpeed(int[] piles, int h) 
    {
        int  max = Integer.MIN_VALUE, n = piles.length;
        for(int i = 0; i < n; i++)
        {
            max = Math.max(max, piles[i]);
        }
        return binarySearch(piles, h, 1, max);
    }
    public static int binarySearch(int[]arr, int h, int left, int right)
    {
        int hr = 0;
        while(left <= right)
        {
            int mid = left + (right - left) / 2;
            hr = getHours(arr, mid);
            if(hr <= h)
            {
                right = mid - 1;
            }
            else 
            {
                left = mid + 1;
            }
        }
        return left;
    }
    public static int getHours(int[]arr, int k)
    {
        int hr = 0;
        for(int i = 0; i < arr.length; i++)
        {
            hr += Math.ceil((double) arr[i] / (double)k);
        }
        return hr;
    }
}
