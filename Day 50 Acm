*************************************************Problem************************************************
You are a city planner in charge of a large metropolis facing a housing crisis. Your quirk, "Skyline Balance," allows you to limit the
maximum height of buildings in any neighborhood. However, there is a restriction: you can only reduce the heights of buildings that exceed 
a certain value to be equal to that value.

One day, the mayor gives you a challenge: you are given an array representing the heights of buildings in a neighborhood and a target total 
height that the city council wants to achieve. Using your quirk, you must adjust the skyline to make the total building height as close as 
possible to the target. If there are multiple solutions, you must choose the smallest height limit that achieves this.

Input Format

The first line contains an integer T, the number of test cases.
The first line of each test case contains two integers n and target, representing the number of buildings and the desired total height of all 
buildings in the neighborhood.
The second line of each test case contains n integers representing the heights of the buildings.
Constraints

1 <= n <= 10^4
1<=T<=1000
1 <= height[i], target <= 10^5
Output Format

For each test case, print the height limit you should set to make the total height as close as possible to the target.

Sample Input 0

1  
3 10  
4 9 3
Sample Output 0

3
Explanation 0

If we set a height limit of 3, the skyline becomes [3, 3, 3], summing to 9, which is the closest possible total to the target.


*****************************************************Solution****************************************
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int T = scanner.nextInt(); // Number of test cases

        for (int t = 0; t < T; t++) {
            int n = scanner.nextInt(); // Number of buildings
            int target = scanner.nextInt(); // Target total height
            int[] heights = new int[n];
            for (int i = 0; i < n; i++) {
                heights[i] = scanner.nextInt(); // Heights of buildings
            }

            // Find the optimal height limit
            int result = findOptimalHeightLimit(heights, target);
            System.out.println(result);
        }
    }

    private static int findOptimalHeightLimit(int[] heights, int target) {
        int left = 0;
        int right = getMaxHeight(heights); // Manually find the maximum height
        int optimalLimit = 0;
        int closestSum = Integer.MAX_VALUE;

        while (left <= right) {
            int mid = left + (right - left) / 2;
            int sum = calculateTotalHeight(heights, mid);

            if (sum == target) {
                return mid; // Exact match found
            }

            // Check if this sum is closer to the target
            if (Math.abs(sum - target) < Math.abs(closestSum - target) ||
                (Math.abs(sum - target) == Math.abs(closestSum - target) && mid < optimalLimit)) {
                closestSum = sum;
                optimalLimit = mid;
            }

            if (sum < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }

        return optimalLimit;
    }

    private static int calculateTotalHeight(int[] heights, int limit) {
        int sum = 0;
        for (int height : heights) {
            sum += Math.min(height, limit);
        }
        return sum;
    }

    private static int getMaxHeight(int[] heights) {
        int max = Integer.MIN_VALUE;
        for (int height : heights) {
            if (height > max) {
                max = height;
            }
        }
        return max;
    }
}
