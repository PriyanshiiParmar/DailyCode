***************************************Problem*************************************
You are standing inside a moving train, looking out through a window of size k. As the train moves forward,
you can only see k consecutive train coaches at a time. The train is long, and each coach has a number written on it.

As the train moves one coach forward, the leftmost coach goes out of view, and a new coach appears on the right.
Your task is to determine the largest number visible through the window after each movement.

Input Format

The first line contains T, the number of test cases.
The first line of each testcase contains N (number of coaches) and k (size of the window).
The second line contains N integers representing the numbers written on each coach in order.
Constraints

1 <= T <= 1000
1 <= N <= 10^5
-10^4 <= N[i] <= 10^4
1 <= k <= N
Output Format

For each test case, print the largest number visible through the train window after each movement.

Sample Input 0

2
8 3
1 3 -1 -3 5 3 6 7
1 1
1
Sample Output 0

3 3 5 5 6 7
1
Explanation 0

Test Case 1 (Train with 8 Coaches, Window Size 3)

[1 3 -1] -3 5 3 6 7 → (Max = 3)
1 [3 -1 -3] 5 3 6 7 → (Max = 3)
1 3 [-1 -3 5] 3 6 7 → (Max = 5)
1 3 -1 [-3 5 3] 6 7 → (Max = 5)
1 3 -1 -3 [5 3 6] 7 → (Max = 6)
1 3 -1 -3 5 [3 6 7] → (Max = 7)
Test Case 2 (Train with 1 Coach, Window Size 1)

[1] → (Max = 1)


******************************************Solution******************************************
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        sc.nextLine();
        while(t-- > 0)
        {
            int n = sc.nextInt();
            int k = sc.nextInt();
            int[]arr = new int[n];
            for(int i = 0; i < n; i++)
            {
                arr[i] = sc.nextInt();
            }
            ArrayList<Integer> list = findMax(arr, k);
            for(int i = 0; i < list.size(); i++)
            {
                System.out.print(list.get(i)+" ");
            }
            System.out.println();
        }
    }
    public static ArrayList<Integer> findMax(int[]arr, int k)
    {
        ArrayList<Integer> list = new ArrayList<>();
        int n = arr.length;
        for(int i = 0; i < n - k + 1; i++)
        {
            int max = Integer.MIN_VALUE;
            for(int j = i; j < i + k; j++)
            {
                max = Math.max(arr[j], max);
            }
            list.add(max);
        }
        return list;
    }
}
