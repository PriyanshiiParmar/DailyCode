********************************Problem******************************
In a peaceful riverside village, fishermen are preparing their nets for a big catch. Some parts of the net are intact and ready for fishing, while others 
(represented as 0) are damaged and unusable. To ensure a successful fishing trip, the fishermen must arrange the net pieces so that all damaged parts are 
shifted to the end, while the usable parts retain their original order.

The task must be completed efficiently, modifying the sequence of net pieces directly in place without creating a copy of the array. Can you help the fishermen
prepare their nets for the big day?

Input Format

The first line contains an integer T, the number of test cases.
For each test case:
The first line contains an integer n, the number of pieces in the net.
The second line contains n integers, representing the condition of each piece of the net, where 0 represents a damaged piece.
Constraints

1≤T≤100
1≤n≤10^4
−2^31≤net[i]≤2^31 −1
Output Format

For each test case, output a single line containing the rearranged sequence of the net pieces, with all damaged parts (0s) at the end, maintaining the relative
order of the intact parts.

Sample Input 0

2  
5  
0 1 0 3 12  
1  
0
Sample Output 0

1 3 12 0 0
0
Explanation 0

Test Case 1: The initial sequence is [0, 1, 0, 3, 12]. The intact pieces 1, 3, and 12 retain their order, while the damaged pieces 0 are shifted to the end, 
resulting in [1, 3, 12, 0, 0].

Test Case 2: The sequence contains only a damaged piece, [0], so no rearrangement is needed.

*******************************Solution********************************
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        sc.nextLine();
        while(t-- > 0)
        {
            int n = sc.nextInt();
            int[]arr = new int[n];
            List<Integer> list = new ArrayList<>();
            int cnt = 0;
            for(int i = 0; i < n; i++)
            {
                arr[i] = sc.nextInt();
                if(arr[i] != 0)
                    list.add(arr[i]);
                else cnt++;
            }
            for(int i : list)
            {
                System.out.print(i + " ");
            }
            for(int i = 0; i < cnt; i++)
            {
                System.out.print( "0 ");
            }
            System.out.println();
        }
    }
}
