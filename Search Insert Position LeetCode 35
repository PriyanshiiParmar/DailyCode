*******************************Problem*********************************
35. Search Insert Position  
https://leetcode.com/problems/search-insert-position/description/


****************************Solution***************************
class Solution 
{
    public int searchInsert(int[] nums, int target) 
    {
        int found = binarySearch(nums, target);   
        if(found != -1)
        return found;
        return insertPos(nums, target); 
    }
    public static int binarySearch(int[]arr, int tar)
    {
        int n = arr.length;
        int low = 0, high = n - 1;
        while(low <= high)
        {
            int mid = low + (high - low) / 2;
            if(arr[mid] == tar)
            return mid;
            if(arr[mid] < tar)
            low = 1 + mid;
            else high = mid - 1;
        }
        return -1;
    }
    public static int insertPos(int[]arr, int tar)
    {
        int i = 0;
        int ans = -1;
        int n = arr.length;
        while(i < n)
        {
            if(arr[i] < tar)
            i++;
            else if(arr[i] >= tar)
            {
            ans = i;
            break;
            }
        }
        return ans == -1 ? n : ans;
    }
}

*****************************Solution***********************
class Solution {
    public int searchInsert(int[] nums, int target) {
        int st = 0, end = nums.length - 1;
        while(st <= end)
        {
            int mid = st + ( end - st) / 2;
            if(nums[mid] == target)
            return mid;
            else if(nums[mid] > target)
            end = mid - 1;
            else
            st = mid + 1;
        }
        return st;
    }
}

           
