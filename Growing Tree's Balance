****************************************************Problem********************************************
You are observing the growth of a mystical tree in a forest. Every day, a new branch grows with a certain length. 
The tree aims to maintain its balance by ensuring that the median length of all branches grown so far is known.

For each new branch length added, determine the median length of the treeâ€™s branches.

Print only the integer part of the median.

Input Format

The first line contains T, the number of test cases.
For each test case:
The first line contains an integer N, representing the number of branches that will grow.
The second line contains N integers separated by a single space, where each integer represents the length of a newly grown branch.
Constraints

1<= T <=1000
0<= N <=10^5
1<= branch length <=10^5
Output Format

Print the median branch length after each new branch grows, separated by spaces.
Sample Input 0

1
6
6 2 1 3 7 5
Sample Output 0

6 4 2 2 3 4
Explanation 0

branches = {6}, median = 6
branches = {6, 2} -> {2, 6}, median = 4
branches = {6, 2, 1} -> {1, 2, 6}, median = 2
branches = {6, 2, 1, 3} -> {1, 2, 3, 6}, median = 2
branches = {6, 2, 1, 3, 7} -> {1, 2, 3, 6, 7}, median = 3
branches = {6, 2, 1, 3, 7, 5} -> {1, 2, 3, 5, 6, 7}, median = 4
Sample Input 1

1
5
5 4 3 2 1
Sample Output 1

5 4 4 3 3


***************************************************Solution*******************************************
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while(t-- > 0)
        {
            int n = sc.nextInt();
            int[]arr = new int[n];
            int[]ans = new int[n];
            for(int i = 0; i < n; i++)
            {
                arr[i] = sc.nextInt();
            }
            ans = findMedian(arr);
            for(int i = 0; i < n; i++)
            {
                System.out.print(ans[i]+" ");
            }
            System.out.println();
        }
    }
    public static int[] findMedian(int[]arr)
    {
        int n = arr.length;
        int[]med = new int[n];
        for(int i = 0; i < n; i++)
        {
            List<Integer> list = new ArrayList<>();
            for(int j = 0; j < i + 1; j++)
            {
                list.add(arr[j]);
            }
            int median = calc(list);
            med[i] = median;
        }
        return med;
    }
    public static int calc(List<Integer> list)
    {
        Collections.sort(list);
        int med = -1;
        int n = list.size();
        if(n % 2 == 0)
        {
           int mid = n / 2;
           int avg = (list.get(mid) + list.get(mid - 1)) / 2;
            med = avg;
        }
        else{
            int mid = n / 2;
            med = list.get(mid);
        }
        return med;
    }
}
