***********************************Problem**************************************
The city is hosting a festival, and roads connecting intersections are decorated with lights. Starting at intersection 1,
find all possible paths to the last intersection n without visiting any intersection more than once.

Given a number of intersections n and a list of roads represented as edges between intersections, your task is to determine
all paths from intersection 1 to intersection n, such that each intersection is visited at most once.

Input Format

An integer t representing the number of test cases.

For each test case:

An integer n, the number of intersections.

An integer m, the number of edges.

m lines, each containing two integers u and v, representing a road between intersections u and v.

Constraints

1≤t≤10

2≤n≤15

1≤m≤50

Output Format

For each test case, output a list of all possible paths as lists of integers, one per line for each test case.

Sample Input 0

1 5 5 1 2 2 5 1 3 3 4 4 5

Sample Output 0

1 2 5 1 3 4 5


************************************Solution********************************
----------------This one is solved by GPT soon , I be doing it with understanding the concepts.-------------------
import java.util.*;

public class Solution {

    static List<List<Integer>> paths;
    static boolean[] visited;
    static List<List<Integer>> adj;

    static void findPaths(int u, int dest, List<Integer> currentPath) {
        visited[u] = true;
        currentPath.add(u);

        if (u == dest) {
            paths.add(new ArrayList<>(currentPath));
        } else {
            for (int v : adj.get(u)) {
                if (!visited[v]) {
                    findPaths(v, dest, currentPath);
                }
            }
        }

        currentPath.remove(currentPath.size() - 1);
        visited[u] = false;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();

        while (t-- > 0) {
            int n = sc.nextInt();
            int m = sc.nextInt();

            adj = new ArrayList<>(n + 1);
            for (int i = 0; i <= n; i++) {
                adj.add(new ArrayList<Integer>());
            }

            for (int i = 0; i < m; i++) {
                int u = sc.nextInt();
                int v = sc.nextInt();
                adj.get(u).add(v);
                adj.get(v).add(u);
            }

            paths = new ArrayList<>();
            visited = new boolean[n + 1];
            List<Integer> currentPath = new ArrayList<>();

            findPaths(1, n, currentPath);

            for (List<Integer> path : paths) {
                for (int node : path) {
                    System.out.print(node + " ");
                }
                System.out.println();
            }
        }
        sc.close();
    }
}

