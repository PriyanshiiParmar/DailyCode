*********************************** Question ***********************************
Find a Peak Element II - https://leetcode.com/problems/find-a-peak-element-ii/description/



************************************ Solution *************************************
class Solution {
    public int[] findPeakGrid(int[][] mat) {
        int n = mat.length, m = mat[0].length, max = Integer.MIN_VALUE;
        int[]ans = new int[2];
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                if(mat[i][j] > max)
                {
                    max = mat[i][j];
                    ans[0] = i;
                    ans[1] = j;
                }
            }
        }
        return ans;
    }
}



***************************** Optimized Solution *****************************
class Solution {
    public int[] findPeakGrid(int[][] mat) {
        return peak(mat);   
    }
    public static int[] peak(int[][]mat)
    {
        int low = 0, high = mat[0].length - 1;
        while(low <= high)
        {
            int mid = low + (high - low) / 2;
            int maxRow = findMaxRow(mat,mid);
            int left = (mid - 1 >= 0) ? mat[maxRow][mid-1] : -1;
            int right = (mid + 1 < mat[0].length) ? mat[maxRow][mid+1] : -1;
            if((mat[maxRow][mid] > left) && (mat[maxRow][mid] > right))
            return new int[]{maxRow, mid};
            if(mat[maxRow][mid] < left)
            high = mid - 1;
            else 
            low = mid + 1;
        }
        return new int[]{-1, -1};
    }
    public static int findMaxRow(int[][]arr, int col)
    {
        int max = Integer.MIN_VALUE, index = -1;
        for(int i = 0; i < arr.length; i++)
        {
            if(max < arr[i][col])
            {
                max = arr[i][col];
                index = i;
            }
        }
        return index;
    }
}
