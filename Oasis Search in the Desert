****************************************Problem*********************************************
In a vast desert, there are rare oases where water and life thrive. Representing the desert as an array of integers
where each element indicates the availability of water at a point, your task is to find the largest oasis. The largest
oasis is defined as the longest contiguous subarray where the sum of elements exceeds or equals a given threshold T.

This problem helps identify patterns in contiguous data, akin to finding regions of interest in a sparse dataset.

Given an array representing water availability at different points in the desert, determine the length of the largest 
contiguous subarray where the sum of elements is at least T. If no such subarray exists, return -1.

Input Format

The first line contains an integer t, representing the number of test cases.
For each test case:
The first line contains an integer n, representing the number of points in the desert.
The second line contains an array water of size n, where each element represents water availability at a point.
The third line contains an integer T, the threshold for an oasis.
Constraints

1≤t≤100
1≤n≤10^5
0≤water[i]≤10^9
1≤T≤10^18
The total number of array elements across all test cases does not exceed 10^6.
Output Format

For each test case, output a single integer representing the length of the largest contiguous subarray where the sum of
elements is at least T, or -1 if no such subarray exists.

Sample Input 0

1
5
1 1 1 1 1
10
Sample Output 0

-1



***********************************Solution****************************************
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        sc.nextLine();
        while(t-- > 0)
        {
            int n = sc.nextInt();
            int[]arr = new int[n];
            for(int i = 0; i < n; i++)
            {
                arr[i] = sc.nextInt();
            }
            long lim = sc.nextLong();
            int ans = -1;
            for(int i = 0; i < n; i++)
            {
                int sum = 0;
                for(int j = i; j < n; j++)
                {
                    sum += arr[j];
                    if(sum >= lim)
                    {
                        ans = Math.max(ans, j - i + 1);
                        break;
                    }
                }
            }
            System.out.println(ans);
        }
    }
}
