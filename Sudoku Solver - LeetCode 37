***************************** Problem - https://leetcode.com/problems/sudoku-solver/submissions/1755089045/?envType=daily-question&envId=2025-08-31 *****************************

****************************************************** Solution ******************************************************
class Solution {
    Map<Integer, Character> map = Map.of(
        1, '1',
        2, '2',
        3, '3',
        4, '4',
        5, '5',
        6, '6',
        7, '7',
        8, '8',
        9, '9'
    );
    public void solveSudoku(char[][] board) {
        solve(board);
    }
    public boolean solve(char[][]board)
    {
        for(int i = 0; i < 9; i++)
        {
            for(int j = 0; j < 9; j++)
            {
                if(board[i][j] == '.')
                {
                    for(char k = '1'; k <= '9'; k++)
                    {
                        if(isValid(board, i, j, k))
                        {
                            board[i][j] = k;

                            if(solve(board))
                            {
                                return true;
                            }
                        }
                        board[i][j] = '.';
                    }
                    return false;
                }
            }
        }
        return true;
    }
    public boolean isValid(char[][]arr, int row, int col, int num)
    {
        for(int i = 0; i < 9; i++)
        {
            if(arr[row][i] == num) return false;
            if(arr[i][col] == num) return false;
        }
                int row_st = (row / 3) * 3;
                int col_st = (col / 3) * 3;
                for(int k = 0; k < 3; k++)
                {
                    for(int l = 0; l < 3; l++)
                    {
                        if(arr[k+row_st][l+col_st] == num) return false;
                    }
                }
        return true;
    }
}
