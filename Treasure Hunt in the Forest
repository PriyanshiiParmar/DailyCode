***************************************Question*********************************************************
You are on a treasure hunt deep within an ancient forest. The forest path is marked with milestones, each containing a number representing the energy you'll gain or lose at that point. To successfully complete your treasure hunt, you need to accumulate at least k units of energy. Your goal is to find the shortest stretch of the path (a contiguous segment of milestones) where the total energy you gain is at least k. If no such segment exists, return -1, as it would mean the treasure is out of reach. Can you overcome the challenges of the forest and find the shortest path to your treasure?

Input Format

The first line contains an integer T, the number of test cases.

For each test case:

The first line contains an integer n, the number of milestones on the path, and an integer k, the required energy.
The second line contains n integers, nums[i], representing the energy gain or loss at the i-th milestone.
Constraints

1<=T<=10
1<=n<=10^5
1<=k<=10^9
-10^5<=nums[i]<=10^5
Output Format

For each test case, output the length of the shortest contiguous segment of the path with a total energy of at least k. If no such segment exists, output -1.

Sample Input 0

1
1 1 
1
Sample Output 0

1
Explanation 0

T = 1: There is only one test case.
n = 1, k = 1: For this test case, there is 1 milestone and the required energy is 1.
nums = [1]: The array nums contains one value, representing the energy gain at the single milestone.
*********************************************Solution************************************************
def shortest_path(n, k, nums):
    min_length = float('inf')
    current_sum = 0
    window_start = 0

    for window_end in range(n):
        current_sum += nums[window_end]

        while current_sum >= k:
            min_length = min(min_length, window_end - window_start + 1)
            current_sum -= nums[window_start]
            window_start += 1

    return min_length if min_length != float('inf') else -1

if _name_ == "_main_":
    t = int(input())
    for _ in range(t):
        n, k = map(int, input().split())
        nums = list(map(int, input().split()))
        print(shortest_path(n, k, nums))
