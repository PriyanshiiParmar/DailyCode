******************************************** PROBLEM ********************************************
Trapping Rain Water -  https://leetcode.com/problems/trapping-rain-water/description/


******************************************** SOLUTION ********************************************
--------------------------------------------- FIRST APPROACH ---------------------------------------------
class Solution {
    public int trap(int[] height) {
        int n = height.length;
        int[] prefixSum = new int[n];
        int[] suffixSum = new int[n];
        prefixSum[0] = height[0];
        suffixSum[n-1] = height[n-1];
        int total = 0;
        for(int i = 1; i < n; i++)
        {
            prefixSum[i] = Math.max(prefixSum[i-1], height[i]);
        }

        for(int i = n - 2; i >= 0; i--)
        {
            suffixSum[i] = Math.max(suffixSum[i+1], height[i]);
        }

        for(int i = 0; i < n; i++)
        {
            int leftMax = prefixSum[i], rightMax = suffixSum[i];
            total += Math.min(leftMax, rightMax) - height[i];
        }

        return total;

    }
}

--------------------------------------------- SECOND APPROACH ---------------------------------------------
class Solution {
    public int trap(int[] height) {
        int lMax = 0, rMax = 0, total = 0, l = 0, r = height.length - 1;
        while(l < r)
        {
            if(height[l] <= height[r])
            {
                if(height[l] < lMax)
                {
                    total += lMax - height[l];
                }
                else{
                    lMax = height[l];
                }
                l++;
            }
            else{
                if(height[r] < rMax)
                {
                    total += rMax - height[r];
                }
                else{
                    rMax = height[r];
                }
                r--;
            }
        }
        return total;
    }
}
