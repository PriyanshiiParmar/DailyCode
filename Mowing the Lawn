*****************************************************Problem*******************************************
Alex has a lawn with different grass heights. He needs to trim the grass until all parts of the lawn are even.
However, he follows a special rule:

In one turn, Alex cuts the smallest non-zero grass height from all uncut areas at the same time.
He continues cutting until the entire lawn is trimmed to zero height.
Can you help Alex find the minimum number of turns needed to fully mow the lawn?

Input Format

The first line contains T, the number of test cases.
For each test case:
The first line contains an integer n, the number of lawn patches.
The second line contains n space-separated integers representing the grass height of each patch.
Constraints

1 <= T <= 1000
1 <= n <= 10^5
0 <= nums[i] <= 10^5
Output Format

For each test case, print the minimum number of turns needed to mow the lawn completely.

Sample Input 0

1
5
1 5 0 3 5
Sample Output 0

3
Explanation 0

First turn: Cut 1 unit from all grass patches → [0, 4, 0, 2, 4]
Second turn: Cut 2 units → [0, 2, 0, 0, 2]
Third turn: Cut 2 units → [0, 0, 0, 0, 0]
Since the entire lawn is mowed, minimum turns = 3.

Sample Input 1

1
1
0
Sample Output 1

0
Explanation 1

The lawn is already fully trimmed, so no turns are needed!


*******************************************************Solution****************************************
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while(t-- > 0)
        {
            int n = sc.nextInt();
            int[]arr = new int[n];
            for(int i = 0; i < n; i++)
            {
                arr[i] = sc.nextInt();
            }
            System.out.println(findCuts(arr));
        }
    }
    public static int findCuts(int[]arr)
    {
        HashSet<Integer> set = new HashSet();
        int turns = 0;
        for(int i = 0; i < arr.length; i++)
        {
            if(arr[i] > 0)
                set.add(arr[i]);
        }
        while(!set.isEmpty())
        {
            turns++;
            set.remove(Collections.min(set));
        }
        return turns;
    }
}
