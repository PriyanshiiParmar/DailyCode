***************************************Problem**************************************
The city’s subway system is expanding, and engineers need to ensure that tunnels meet specific clearance heights for trains to pass safely.
Tunnel clearances are listed in increasing order. A train engineer wants to know if a train with a specific height can safely pass through a tunnel.

Given the list of tunnel clearances and the height of the train, determine the smallest clearance that is greater than or equal to the train's height. 
If no such tunnel exists, return -1.

Input Format

An integer t, the number of test cases.
For each test case:
An integer n, representing the number of tunnels.
A sorted list of integers clearances, of size n, representing tunnel clearances.
An integer train_height, representing the height of the train.
Constraints

1≤t≤10 1≤n≤10^5 1≤clearances[i]≤10^9 1≤train_height≤10^9

Output Format

For each test case, output a single integer representing the smallest tunnel clearance greater than or equal to the train's height if it exists, otherwise -1.

Sample Input 0

1  
5  
100 200 300 400 500  
250  
Sample Output 0


***********************************************Solution*******************************************************
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while(t-- > 0)
        {
            int n = sc.nextInt();
            long[]arr = new long[n];
            for(int i = 0; i < n; i++)
            {
                arr[i] = sc.nextLong();
            }
            long tar = sc.nextLong();
            int low = 0, high = n - 1;
            long ans = -1;
            while(low <= high)
            {
                int mid = low + (high - low) / 2;
                if(arr[mid] == tar)
                {
                    ans = arr[mid];
                    break;
                }
                else if(arr[mid] > tar && tar > arr[mid - 1])
                {
                    ans = arr[mid];
                    break;
                }
                else if(arr[mid] > tar)
                {
                    high = mid - 1;
                }
                else low = mid + 1;
            }
            System.out.println(ans);
        }
    }
}
300  
