********************************************************** Problem **********************************************************
Evaluate Reverse Polish Notation - https://leetcode.com/problems/evaluate-reverse-polish-notation/description/?envType=study-plan-v2&envId=top-interview-150

********************************************************** Solution **********************************************************

// Key idea
-> create stack
-> iterate through the array, when found any operator, pop last two elements from stack and perform the operation, again push the res into the stack
-> else continue to push the element to stack

class Solution {
    public int evalRPN(String[] s) {
        Stack<String> st = new Stack<>();
        for(int i = 0; i < s.length; i++)
        {
            if (s[i].matches("-?\\d+")) {  
                st.push(s[i]);
            }
            else{
                int a = Integer.parseInt(st.pop());
                int b = Integer.parseInt(st.pop());
                String op = s[i];
                int res = 0;
                if(op.equals("+"))
                {
                    res = a + b;
                }
                else if(op.equals("-"))
                {
                    res = b - a;
                }else if(op.equals("*"))
                {
                    res = b * a;
                }else if(op.equals("/"))
                {
                    res = b / a;
                }
                st.push(Integer.toString(res));
            }
        }
        return Integer.parseInt(st.peek());
    }
}
