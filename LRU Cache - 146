******************************************************************* Problem *******************************************************************
LRU Cache - https://leetcode.com/problems/lru-cache/description/?envType=study-plan-v2&envId=top-interview-150


******************************************************************* Solution *******************************************************************

// LRU here is implemented using a doubly linked list with map data structure

class LRUCache {

    class ListNode{
        int key, val;
        ListNode(int k , int v)
        {
            key = k;
            val = v;
        }
        ListNode prev, next;
    }

    int cap;
    ListNode head, tail;
    Map<Integer, ListNode> map = new HashMap<>();

    public LRUCache(int capacity) {
        cap = capacity;
        head = new ListNode(0, 0);
        tail = new ListNode(0, 0);
        head.next = tail;
        tail.prev = head;
    }
    
    public int get(int key) {
        if(!map.containsKey(key)) return -1;
        ListNode node = map.get(key);
        deleteNode(node);
        insertFront(node);
        return node.val;
    }
    
    public void put(int key, int value) {
        if(map.containsKey(key))
        {
            ListNode node = map.get(key);
            deleteNode(node);
            node.val = value;
            map.put(key, node);
            insertFront(node);
        }
        else{
            if(map.size() == cap)
            {
                ListNode lru = tail.prev;
                map.remove(lru.key);
                deleteNode(lru);
            }
            ListNode node = new ListNode(key, value);
            map.put(key, node);
            insertFront(node);
        }
    }

    public void deleteNode(ListNode node)
    {
        node.prev.next = node.next;
        node.next.prev = node.prev;
    }

    public void insertFront(ListNode node)
    {
        node.next = head.next;
        node.prev = head;
        head.next.prev = node;
        head.next = node;
    }

}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
