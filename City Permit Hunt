***************************************Problem****************************************
The bustling city of Skyline has recently implemented a system for tracking building permits. Each permit has a unique ID,
and the city council stores these IDs in sorted order. Mayor Thompson needs to locate a specific permit ID to investigate a complaint about construction violations.

Help the mayor by finding the position of the desired permit ID in the sorted list. If the permit ID does not exist, inform the mayor with a -1 to save their time.

Input Format

An integer t, the number of test cases. For each test case: An integer n, representing the number of permits.
A sorted list of integers permits, of size n, representing the permit IDs. An integer target, representing the permit ID the mayor is searching for.

Constraints

1≤t≤10
1≤n≤10
0≤permits[i]≤10^9
0≤target≤10^9
Output Format

For each test case, output a single integer representing the 0-based index of the target permit ID if found, otherwise -1.

Sample Input 0

1  
5  
1001 1002 1005 1010 1012  
1005  
Sample Output 0

2  


**********************************************Solution*********8******************************
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while(t-- > 0)
        {
            int n = sc.nextInt();
            long[]arr = new long[n];
            for(int i = 0; i < n; i++)
            {
                arr[i] = sc.nextLong();
            }
            long tar = sc.nextLong();
            int low = 0, high = n - 1;
            int ans = -1;
            while(low <= high)
            {
                int mid = low + (high - low) / 2;
                if(arr[mid] == tar)
                {
                    ans = mid;
                    break;
                }
                else if(arr[mid] > tar)
                {
                    high = mid - 1;
                }
                else low = mid + 1;
            }
            System.out.println(ans);
        }
    }
}
