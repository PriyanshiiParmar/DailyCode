************************************* Problem *****************************************
Row with max 1s - https://www.geeksforgeeks.org/problems/row-with-max-1s0023/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=row-with-max-1s


******************************* Solution **********************************
class Solution {
    public int rowWithMax1s(int arr[][]) {
        // code here
        int maxCnt = 0, row = 0;
        for(int i = 0; i < arr.length; i++)
        {
            int cnt = 0;
            for(int j = 0; j < arr[0].length; j++)
            {
                if(arr[i][j] == 1)
                cnt++;
            }
            if(cnt > maxCnt)
            {
                maxCnt = cnt;
                row = i;
            }
        }
        return row;
    }
}



*********************************** Optimized **********************************************
class Solution {
    public static int findCnt(int[] arr) {
        int low = 0, high = arr.length - 1, ans = Integer.MAX_VALUE;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (arr[mid] == 1) {
                high = mid - 1;
                ans = mid; // First occurrence of 1
            } else {
                low = mid + 1;
            }
        }
        return ans;
    }

    public int rowWithMax1s(int arr[][]) {
        int maxCnt = 0, row = -1; // Initialize row to -1 for no row found case
        for (int i = 0; i < arr.length; i++) {
            int firstOneIndex = findCnt(arr[i]);
            if (firstOneIndex != Integer.MAX_VALUE) {
                int cnt = arr[i].length - firstOneIndex; // Count of 1s in the row
                if (cnt > maxCnt) {
                    maxCnt = cnt;
                    row = i;
                }
            }
        }
        return row; // Return the row with maximum 1s
    }
}

